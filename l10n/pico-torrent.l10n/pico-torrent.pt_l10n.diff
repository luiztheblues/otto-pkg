1,81c1,82
< #!/usr/bin/env python
< 
< '''
< pico-torrent 1.0
< Torrent module for Otto-PKG.
< Developed by: Jazz_Man (alias)
< Applied from the following example: https://www.libtorrent.org/python_binding.html
< License:
< Copyright © MMXX Projeto Pindorama.
< Otto_PKG is under Caldera license.
< 
< Dependencies:
< 
<  >python 3.4=<
<  >libtorrent-rasterbar
< 
< Syntax
< python3.? pico-torrent -f <file> -d <directory> (-s| )
< 
< To-do list:
<  > Manually set up the download bandwidth priority;
<  > Use magnet link instead of file;
<  > Create .torrent files (from the mkpkg call on Otto.SH);
<  > Cryptography support (perhaps).
< '''
< 
< import libtorrent as lt
< import argparse, os
< 
< 
< argument = argparse.ArgumentParser()
< argument.add_argument("--file", "-f", required=True,
<                        help="Torrent file to download")
< argument.add_argument("--seeding", "-S", action="store_true",
<                        help="Keep seeding after the download is complete")
< argument.add_argument("--infos", "-i",
<                        help="Show torrent info")
< argument.add_argument("--output", "-O", action="store_true",
<                        help="File output; filename")
< #argument.add_argument("--download-priority", "-P", default=lt.pri,
< #                       help="Set download priority")
< #argument.add_argument("--link", "-L",
< #                       help="Create a magnet link through a file")
< argument.add_argument("--dir", "-d",
< 					   help="Specify the download save directory")
< arguments = argument.parse_args()
< 
< session = lt.session({'listen_interfaces': '0.0.0.0:10881'})
< 
< 
< def start_download(filename):
<     try:
<         info = lt.torrent_info(filename)
<         if arguments.dir:
<             if os.path.isdir(arguments.dir):
<                 local = session.add_torrent({'ti': info, 'save_path': arguments.dir})
<             else:
<                 print(">>> Invalid Directory")
<         else:
<             local = session.add_torrent({'ti': info, 'save_path': '/tmp/otto_pkg/'})
<         torrent = local.status()
<         if arguments.file and arguments.seeding:
<             while True:
<                 torrent = local.status()
<                 print("\r%.2f%% complete (down: %.1f kB/s up: %.1f kB/s peers: %d) %s" % (
<                  torrent.progress * 100, torrent.download_rate / 1000, torrent.upload_rate / 1000,
<                  torrent.num_peers, torrent.state), end=" ")
<             print("\n>>> Download complete.\n>>>Seeding")
<         elif arguments.file:
<             while not torrent.is_seeding:
<                 torrent = local.status()
<                 print("\r%.2f%% complete (down: %.1f kB/s up: %.1f kB/s peers: %d) %s" % (
<         		 torrent.progress * 100, torrent.download_rate / 1000, torrent.upload_rate / 1000,
<         		 torrent.num_peers, torrent.state), end=" ")
<         print("\n>>> Download complete!")
<     except KeyboardInterrupt:
<         print("\n>>> Exiting...\n")
<     except Exception as error:
<         print(">>> There was an error: {}".format(error))
< 
< start_download(arguments.file)
---
> #!/usr/bin/env python
> 
> '''
> pico-torrent 1.0
> Torrent module for Otto-PKG.
> Desenvolvido por: Jazz_Man (pseudônimo)
> Adaptado a partir do seguinte exemplo: https://www.libtorrent.org/python_binding.html
> Licença:
> Copyright © MMXX Projeto Pindorama.
> OTTO_PKG está sobre a Licença Caldera.
> 
> Dependências:
> 
>  >python 3.4=<
>  >libtorrent-rasterbar
> 
> Sintaxe
> python3.? otto-torrent.py -f <file>
> 
> Coisas pendentes:
>  >Ajustar manualmente a prioridade de banda do download;
>  >Usar link magnético ao invés de arquivo;
>  >Criar arquivos .torrent (a partir da chamada mkpkg no Otto.SH);
>  >Suporte de criptografia (talvez).
> '''
> 
> import libtorrent as lt
> import argparse, os
> 
> 
> argumento = argparse.ArgumentParser()
> argumento.add_argument("--file", "-f", required=True,
>                        help="Arquivo torrent para fazer download")
> argumento.add_argument("--seeding", "-S", action="store_true",
>                        help="Continuar semeando após o término do download")
> argumento.add_argument("--infos", "-i",
>                        help="Mostrar informações do torrent")
> argumento.add_argument("--output", "-O", action="store_true",
>                        help="Saída final do arquivo; nome")
> #argumento.add_argument("--download-priority", "-P", default=lt.pri,
> #                       help="Definir prioridade ao download")
> #argumento.add_argument("--link", "-L",
> #                       help="Criar um link magnético através de um arquivo")
> argumento.add_argument("--dir", "-d",
> 					   help="Especificar diretório onde o donwload ficará salvo")
> argumentos = argumento.parse_args()
> 
> sessao = lt.session({'listen_interfaces': '0.0.0.0:10881'})
> 
> 
> def iniciar_download(arquivo):
>     try:
>         info = lt.torrent_info(arquivo)
>         if argumentos.dir:
>             if os.path.isdir(argumentos.dir):
>                 local = sessao.add_torrent({'ti': info, 'save_path': argumentos.dir})
>             else:
>                 print(">>> Diretório inválido")
>         else:
>             local = sessao.add_torrent({'ti': info, 'save_path': '/tmp/otto_pkg/'})
>         torrent = local.status()
>         if argumentos.file and argumentos.seeding:
>             while True:
>                 torrent = local.status()
>                 print("\r%.2f%% complete (down: %.1f kB/s up: %.1f kB/s peers: %d) %s" % (
>                  torrent.progress * 100, torrent.download_rate / 1000, torrent.upload_rate / 1000,
>                  torrent.num_peers, torrent.state), end=" ")
>             print("\n>>> Download concluído.\n>>>Semeando")
>         elif argumentos.file:
>             while not torrent.is_seeding:
>                 torrent = local.status()
>                 print("\r%.2f%% complete (down: %.1f kB/s up: %.1f kB/s peers: %d) %s" % (
>         		 torrent.progress * 100, torrent.download_rate / 1000, torrent.upload_rate / 1000,
>         		 torrent.num_peers, torrent.state), end=" ")
>         print("\n>>> Download concluído!")
>     except KeyboardInterrupt:
>         print("\n>>> Saindo do programa...\n")
>     except Exception as error:
>         print(">>> Houve algum erro: {}".format(error))
> 
> iniciar_download(argumentos.file)
> 
