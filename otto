#!/usr/bin/env zsh
# vim: noai:ts=4:sw=4:expandtab

#Otto-PKG - Ein Paketmanager, der Pakete über BitTorrent herunterlädt.

#:BSD 2-Clause License

#Copyright (c) 2019-2020, Luiz Antônio Rangel et Projeto Pindorama
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Dependências:
#ZShell
#Python 3.{4 or 8}
#Libtorrent and Libtorrent bindings for Python 3.x
#CURL
#POSIX 7-Zip (p7zip)

#TO DO:
#Terminar as funções pelo menos.
#Portar para outros sistemas UNIX.
#Otimizar o máximo possível.

##############################################
#"Settar" algumas variáveis para uma execução "perfeita"  do Otto:
##Exportar as duas variaveis de linguagem como "C" (inglês), para maior performance e velocidade do script. Por isso, acentos não serão usados no output do programa.
export LANG=C
export LC_ALL=C

##Especificações do Otto no código do Otto:
export PROG='Otto'
export VER='0.6-alpha'
export PKG_FORMT='.otpm'
export INDEXFILE='.otidx'
export PKG_COMPSS='7z'
export HOST_OS=$(uname)
#^Dica para os outros desenvolvedores: para variáveis simples como essas, exceto pela última onde estou puxando um subshell, usem sempre aspas simples.
#O motivo eu possivelmente explicarei na documentação, se não alguém o explicará... mas se resume em velocidade na execução.

##Definir cores.
export RED='\033[31;1m'
export YELLOW='\033[33;1m'
export BLUE='\033[34;1m'
export GREEN='\033[32;1m'
export END='\033[m'

#Aspas simples não devem ser usadas aqui em diante com o printf, o que sera explicado na documentacao.
#Carregar biblioteca de variáveis externas, do sistema e do usuário
#configuradas já na instalação do sistema ou do Otto em si caso for possível:
if [[ -f $ETCDIR/make.cfg ]]; then
	source $ETCDIR/make.cfg
else
	printf "${RED}make.cfg nao foi encontrado!$END\n"
	printf "${RED}Leia a documentacao e crie o arquivo conforme as normas.$END\n"
	exit 127
fi
############## FUNÇÕES DO SCRIPT ##############

chkroot(){
if 	[ `id -u` -eq 0 ]; 
then
	printf "${RED}Login wie root user.$END\n"
	exit 1
fi
}

pkgdown(){
for TORRENT in "$@"; do
	PKGNM=$(cut -d '/' -f 2 <<< $(printf "$TORRENT\n"))
	curl $MIRROR/packages/$torrent.otlnk -O /tmp/$PKGNM.torrent
	otto-torrent -s -f /tmp/$PKGNM.torrent -d $SRCDIR
done
}

compile(){
if [[ -f configure ]]; then
    ./configure --prefix=$MKPRFIX
    make install
else
    make install
fi
}

#autoclean só pra ter certeza, hu3
#AVISO: Eu penso que isso deveria ficar ao gosto do usuario, Caio...
#autoclean(){
#    chkroot
#    printf "Removendo arquivos desnecessários...\n"
#    rm -rf $SRCDIR/*
#}

install(){
    chkroot
    pkgdown
    printf "Descompactando $PKGNM$PKG_FORMT...\n"
    $PKG_COMPSS x $SRCDIR/$PKGNM$PKG_FORMT
    chdir $SRCDIR
    DIRLIST=$(ls)
    for dir in $DIRLIST; do
        #FIRSTDIR=$(printf "$dir\n" | tr -d '$PKG_FORMT' | awk '{print $1}')
        FIRSTDIR=$(awk '{print $1}' <<< $(tr -d '$PKG_FORMT') <<<  $(printf "$dir\n"))
        cd $FIRSTDIR
        compile
        cd ..
        rm $FIRSTDIR
    done
    printf "$PKGNM" >> $ETCDIR/package.installed
    #autoclean
    exit 0
}

remove(){
    chkroot
    printf "${RED}Erro:$END funcao ainda nao implementada.\n"
    exit 1
}

update(){
    chkroot
    cd $PKGDIR
    curl -O $MIRROR/pkglist
    $PKG_COMPSS x pkglist$INDEXFILE
    printf "Lista de pacotes disponíveis atualizado.\n"
    exit 0
}

mkpkg(){
    chkroot
    printf "${RED}Erro:$END funcao ainda nao implementada.\n"
    exit 1
}

list(){
if [[ -f $ETCDIR/package.installed ]]; then
    cat $ETCDIR/package.installed
    exit 0
else
    printf "${RED}Erro:$END lista de pacotes nao encontrada.\n"
    exit 1
fi
}

info(){ printf "\
Otto $VER
Paketformat $PKG_FORMT
Betriebssystem: $HOST_OS
Copyright (c) 2019-2020 Luiz Antonio Rangel et Project Pindorama.
Copyright (c) 2019-2020 Caio Novais.
"
exit 0
}

help(){ printf "\
${GREEN}Otto $VER, ein paketmanager.$END
> help    - Mostrar essa mensagem de ajuda. Para mais informacoes, leia o manual.
> info    - Listar informacoes do programa.
> dig     - Instalar pacote.
> bury    - Remover pacote.
> up2date - Atualizar index do repositorio e pacotes.
> mkpkg   - Criar pacote.
> list    - Listar pacotes instalados.
"
exit 0
}
############## FIM DAS FUNCOES ################

############## CASE DO SCRIPT #################
case $1 in
	help*) help "$2" ;;
	info*) info "$2" ;;
	dig*) install "$2" ;;
	bury*) remove "$2" ;;
	up2date*) update "$2" ;;
	mkpkg*) mkpkg "$2" ;;
    list*) list "$2" ;;
	*) help "$2" ;;
esac
############## FIM DO CASE ####################
