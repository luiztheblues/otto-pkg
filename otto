#!/usr/bin/env sh
# vim: noai:ts=4:sw=4:expandtab

#Otto-PKG - Ein Paketmanager, der Pakete über BitTorrent herunterlädt.

#BSD 2-Clause License

#Copyright (c) 2019-2020, Luiz Antônio Rangel et Projeto Pindorama
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Dependências:
#Python 3.{4 or 8}
#Libtorrent and Libtorrent bindings for Python 3.x
#CURL
#POSIX 7-Zip (p7zip)

#TO DO:
#Terminar as funções pelo menos.
#Portar para outros sistemas UNIX caso for necessário.
#Otimizar o máximo possível.

##############################################
#"Settar" algumas variáveis para uma execução "perfeita"  do Otto:
##Exportar as duas variaveis de linguagem como "C" (inglês), para maior performance e velocidade do script. Por isso, acentos não serão usados no output do programa.
export LANG=C
export LC_ALL=C

##Especificações do Otto no código do Otto:
export PROG='Otto'
export VER='0.5.5'
export PKG_FORMT='.otpm'
export PKG_COMPSS='7z'
export OTTOETC='/etc/otto'
export HOST_OS=$(uname)
#^Dica para os outros desenvolvedores: para variáveis simples como essas, exceto pela última onde estou puxando um subshell, usem sempre aspas simples.
#O motivo eu possivelmente explicarei na documentação, se não alguém o explicará... mas se resume em velocidade na execução.

##Definir cores.
export RED='\033[31;1m'
export YELLOW='\033[33;1m'
export BLUE='\033[34;1m'
export GREEN='\033[32;1m'
export END='\033[m'

#Aspas simples não devem ser usadas aqui em diante com o printf, o que será explicado na documentação.
#Carregar biblioteca de variáveis externas, do sistema e do usuário
#configuradas já na instalação do sistema ou do Otto em si caso for possível:
if [ -f "$OTTOETC/make.cfg" ]; then
	. "$OTTOETC/make.cfg"
else
	printf "${RED}make.cfg not found!$END\n"
    exit 1
fi
############## FUNÇÕES DO SCRIPT ##############

##Substituições de comandos externos
#alternativa ao wc -l.
lines(){
    while IFS=$(read -r lines) || [ -n "$lines" ]; do
        lines=$(lines+1)
    done < "$1"
}

##Fim das substituições

chkroot(){
if [ $(id -u) -ne 0 ]; then
    printf "${RED}Login wie root user.$END\n"
    exit 130
fi
}

params(){
if [ -z "$1" ]; then
    printf "${RED}ERROR:$END insufficient parameters.\n"
    exit 127
fi
}

compile(){
    make install
}

autoclean(){
    printf "Autocleaning...\n"
    rm -rf "$SRCDIR/old/*"
}

pkgdown(){
for torrent in "$@"; do
    PKGNM=$(printf "$torrent\n" | cut -d "/" -f 2)
    curl "$MIRROR/packages/$torrent.otlnk" -O "/tmp/$PKGNM.torrent"
    otto-torrent -s -f "/tmp/$PKGNM.torrent" -d $SRCDIR
done
}

install(){
    params
    chkroot
    pkgdown
    printf "Extracting $PKGNM$PKG_FORMT...\n"
    $PKG_COMPSS x "$SRCDIR/$PKGNM$PKG_FORMT"
    cd $SRCDIR
    DIRLIST=$(ls)
    for dir in $DIRLIST; do
        FIRSTDIR=$(printf "$dir\n" | tr -d '$PKG_FORMT' | awk '{print $1}')
        cd $FIRSTDIR
        compile
        printf "${GREEN}Final size of the build tree: $(du -sh .)$END"
        cd ..
    done
    cd $SRCDIR; mkdir -p old; mv * old
    printf "$PKGNM" >> $PKGDIR/package.installed
    if [ $AUTOCLEAN = YES ]; then
        autoclean
    fi
    exit 0
}

#estou enrolando muito para fazer tudo, eu sei.
remove(){
    params
    chkroot
    printf "${RED}ERROR:$END function not ready yet.\n"
    exit 1
}

update(){
    chkroot
    cd $PKGDIR
    curl -O "$MIRROR/pkgindex$PKG_FORMT"
    $PKG_COMPSS x "pkgindex$PKG_FORMT"
    printf "Package index updated.\n"
    exit 0
}

mkpkg(){
    params
    chkroot
    printf "${RED}ERROR:$END function not ready yet.\n"
    exit 1
}

list(){
if [ -f "$PKGDIR/package.installed" ]; then
    cat "$PKGDIR/package.installed"
    lines "$PKGDIR/package.installed"
    printf '%s\n' "$lines installed packages."
    exit 0
else
    printf "${RED}ERROR:$END package list not found.\n"
    exit 1
fi
}

info(){ printf "\
Otto $VER
Paketformat $PKG_FORMT
Betriebssystem: $HOST_OS

Copyright (c) 2019-2020 Luiz Antonio Rangel et Project Pindorama.
Copyright (c) 2019-2020 Caio Novais.
"
exit 0
}

help(){ printf "\
${GREEN}Otto $VER, ein paketmanager.$END

> help    - Show this help message.
> info    - List info about the software.
> find    - Search for content in otto's files.
> dig     - Install package.
> bury    - Remove package.
> up2date - Update repository index and packages.
> mkpkg   - Create package.
> list    - List installed packages.
"
exit 0
}

find(){
    params
    grep "$1" $(which otto) "$OTTOETC/make.cfg"
    exit 0
}

############## FIM DAS FUNCOES ################

############## CASE DO SCRIPT #################
case $1 in
	help*) help "$2" ;;
	info*) info "$2" ;;
        find*) find "$2" ;;
	dig*) install "$2" ;;
	bury*) remove "$2" ;;
	up2date*) update "$2" ;;
	mkpkg*) mkpkg "$2" ;;
        list*) list "$2" ;;
	*) help "$2" ;;
esac
############## FIM DO CASE ####################

