#!/bin/jsh
# I think that jsh (OpenSolaris' POSIX Shell, now ported to Linux via Heirloom Project) can handle this.

## Shell alternatives to external processes
## pcat() by Jefferson Rocha <jeffersoncarneiro@slackjeff.com.br> @ bananapkg;
## lines() added by Caio Novais <caionov08@gmail.com>, but originally it's came from Dylan Araps' pure-sh-bible (and yeah, i didn't knew this);
## basename() (and already cited lines()) by Dylan Araps <https://github.com/dylanaraps> @ pure-sh-bible.
## ptimeout() by Luiz Ant√¥nio Rangel <luiz.antonio.rangel@bol.com.br> @ otto-pkg.
## Everything here (except what was added @ otto-pkg) was originally in MIT License, now sublicensed to Caldera/4-Clause BSD license (see LICENSE).

# basename
basename() {
  DIR=${1%${1##*[!/]}}
  DIR=${DIR##*/}
  DIR=${DIR%"$2"}
  printf '%s\n' "${DIR:-/}"
}

# wc -l
lines() {
  while IFS= read -r LINE || [ -n "$LINE" ]; do
    LINES=$((LINES+1))
  done < "$1"
  printf '%s\n' "$LINES"
  unset LINES
}

# cat
pcat(){
  local EOF='EOF'
  INPUT=("${@:-"%"}")
  for I in "${INPUT[@]}"; do
    if [[ "$I" != "%" ]]; then
      exec 3< "$I" || exit 1
      else
      exec 3<&0
    fi
    while read -ru 3; do
      [[ "$REPLY" = "$EOF" ]] && break
      printf '%s\n' "$REPLY"
    done
  done
}

# timeout
timeout(){
  "$2" & local PID="$!" ; sleep "$1" && kill "$PID"
}

##End of alternatives section
