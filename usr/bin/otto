#!/usr/bin/env sh
# vim: noai:ts=4:sw=4:expandtab

# Otto-PKG - Ein Paketmanager, der Pakete über BitTorrent herunterlädt.

# BSD 2-Clause License

# Copyright (c) 2019-2020, Luiz Antônio Rangel et Projeto Pindorama
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#############    Depends    ###############
# Python 3.[4,8]
# Libtorrent and Libtorrent bindings for Python 3.x
# CURL
# POSIX 7-Zip (p7zip)
##############     END       ##############

# TO DO:
# Terminar as funções pelo menos.
# Otimizar o máximo possível.


############# Export C locale #############
export LANG=C
export LC_ALL=${LANG}
##############     END       ##############

############# Export chdir alias ########## 
# Isso deve ser comentado em Shells que já tenham o chdir como comando nativo.
alias chdir='cd'
##############     END       ##############

############# Program Specifications ######
export PROG='Otto'
export VER='1.0.0'
export PKG_FORMT='.psl'
export INDEXFILE='.otidx'
export PKG_COMPSS='7z'
export OTTOETC='/etc/otto'
export HOST_OS=${HKERNEL}
##############     END       ##############

############## Include Files ##############
. /usr/lib/otto/colors.i
. /usr/lib/otto/blink.i
. /usr/lib/otto/txtampel.i
. /usr/lib/otto/txtwait.i
. /usr/lib/otto/posix-alt.i
##############     END       ##############

# Load the configuration file:
if [ -f "$OTTOETC/make.cfg" ]; then
	. "$OTTOETC/make.cfg"
else
	printf "${RED}make.cfg not found!$END\n"
	printf "${YELLOW}Copy this file from the installation media (or download it from the offcial repo) and configure it.$END\n"
    exit 1
fi
############## Script Functions ##############


############## ARE YA CHECKING SON? #########
chkroot(){
if [ $(id -u) -ne 0 ]; then
    printf "It looks like you are not logged into ${YELLOW}toor$END nor ${YELLOW}root$END user...\n"
    printf "Would you like to install the program on the highest userland layer ($HIUSR) instead of installing directly on the root of the system [Y/N]?\n"
    printf "${BLK_RED}WARNING:$END Some packages cannot be installed on the highest userland layer under any circunstances.\n"
    read ANTWORTEN
    if echo "$ANTWORTEN" | pgrep -iq "^n" ;then
        printf "Alright, exiting."
        exit 130
    else
	   export USRDIR=${HIUSR}
	   export USRBIN=${HIUSRBIN}
	   export ETC=${HIETC}
    fi
else
    export USRDIR=${LOUSR}
    export USRBIN=${LOUSRBIN}
    export ETC=${LOETC}
fi
}

chknet(){
    printf "Checking network connection"
    txtwait
if  printf "GET luiznet.tk HTTP/1.0\n\n" | timeout 12 netcat luiznet.tk 80 > /dev/null 2>&1
then
    kill $WAITPID
    printf "[ ${GREEN}OK$END ]\n"
else
    kill $WAITPID
    printf "[ ${RED}FAILED$END ]\n"
    printf "Apparently, this box ${RED}isn't connected$END to the World Wide Web.\a\n
    If you don't have a internet connection, try to download the raw package (a ${YELLOW}$PKG_FORMT$END which contains the source-code/program files and a build/install file), save it in a diskette, CD, SDCard or USB and install it using ${YELLOW}otto dig -raw$END.\n
    If you expected to have networking on this box, ${BLK_RED}do some checks$BLK_END. Check if the network daemon is running, if the drivers are enabled on the Kernel and if the physical devices are even working/turned on.\n"
}
fi
##############  Sure i am, dad.  ############

params(){
if [ -z "$1" ]; then
    printf "${RED}ERROR:$END Insufficient parameters.\n"
    exit 127
fi
}

chkdsk(){
# Really bad functions made to take the disk space value, change it later.
    VERFDSK=$(df -h -m / | tail -1 | grep '[0-9]''[G,%]' | cut --delimiter=" " -f '14')
    BENUTZT=$(df -h / | tail -1 | grep '[0-9]''[G,%]' | cut --delimiter=" " -f '11')
    GROSSEDSK=$(df -h / | tail -1 | grep '[0-9]''[G,%]' | cut --delimiter=" " -f '8')
    
}

uncompress(){
    AMPEL=(
	"Extracting $PKGNM$PKG_FORMT."
	"Extracting $PKGNM$PKG_FORMT.."
	"Extracting $PKGNM$PKG_FORMT..."
    )
    txtampel
    /usr/bin/7z x "$SRCDIR/$PKGNM$PKG_FORMT" -bb1
    kill $AMPID
}

build(){
sh $PKGNM.otbuild    
}

autoclean(){
    printf "Autocleaning...\n" ; rm -ri "$SRCDIR/old/*"
}

pkgdown(){
    for TORRENT in "$@"; do
	#TO BE IMPLEMENTED: Install packages from any directory
	#DASHES=${TORRENT//[^\/]}
	#PKGNM=$(printf "$TORRENT\n" | cut -d "/" -f ${#DASHES})
	#or, a more portable alternative
	#PKGNM=$(printf "$TORRENT\n" | cut -d "/" -f `printf "$TORRENT\n" | grep -o '/' | wc -l`)
	PKGNM=`printf "$TORRENT\n" | cut -d "/" -f 2`
	/usr/bin/pico-torrent -s -f "/usr/otto/db/$TORRENT.otlink" -d $SRCDIR
    done
}

# Rewrite this.
#install(){
#    params && chkroot && pkgdown
#    printf "Extracting $PKGNM$PKG_FORMT...\n"
#    /usr/bin/7z x "$SRCDIR/$PKGNM$PKG_FORMT" -bb1
#    chdir $SRCDIR
#    DIRLIST=$(ls)
#    for dir in $DIRLIST; do
#        FIRSTDIR=$(printf "$dir\n" | tr -d '$PKG_FORMT' | awk '{print $1}')
#        chdir $FIRSTDIR
#        compile
#        printf "${GREEN}Final size of the build tree: $(du -sh .)$END"
#        chdir ..
#    done
#    chdir $SRCDIR; mkdir -p old; mv * old
#    printf "$PKGNM" >> $PKGDIR/package.installed
#    [ $AUTOCLEAN = YES ] && autoclean
#    exit 0
#}

install(){
    params && chkroot && pkgdown
    uncompress

}

remove(){
    params && chkroot
    printf "${RED}ERROR:$END function not ready yet.\n"
    exit 1
}

update(){
    chkroot
    chdir $OTTOETC
    curl -OD -# "$MIRROR/pkgindex$INDEXFILE"
    $PKG_COMPSS x "pkgindex$INDEXFILE"
    printf "Package index updated.\n"
    exit 0
}

mkpkg(){
    
}

list(){
if [ -f "$OTTOETC/package.installed" ]; then
    pcat "$OTTOETC/package.installed"
    lines "$OTTOETC/package.installed"
    printf '%s\n' "$lines installed packages."
    exit 0
else
    printf "${BLK_RED}ERROR:$BLK_END package list not found!.\a\n"
    exit 140
fi
}

info(){ printf "\
Otto-PKG $VER
Paketformat $PKG_FORMT
Betriebssystem: $HOST_OS

Copyright (c) 2019-2020 Luiz Antonio Rangel, Caio Novais et Project Pindorama.

lib-txtampel und lib-posixalt (@ ${LOUSR}/lib/otto) 
Copyright (c) 2019-2020 Jefferson Rocha et MazonOS Team. 
Copyright (c) 2020 Luiz Antonio Rangel, Caio Novais et Project Pindorama.
"
exit 0
}

help(){
    export LANG=en_US.UTF-8
    export LC_ALL=${LANG}
    printf "\
${GREEN}Otto $VER, ein paketmanager.$END

> -help (-H)    - Show this help message.
> -info (-I)    - List info about the software.
> -find (-f)    - Search for content in Otto's files.
> -dig  (-d)    - Install package.
> -bury (-b)    - Remove package.
> -up2date (-u) - Update repository index and packages.
> -mkpkg (-mp)  - Build a package (using source code or binaries). 
> -list  (-l)   - List installed packages.

✠ GOTT MIT UNS ✠
"
exit 0
}

find(){
    params
    grep "$1" $(which otto) "$OTTOETC/make.cfg"
    exit 0
}

##############     END      #################

############## CASE DO SCRIPT #################
case $1 in
	-help|help|-H*) help ;;
	-info|info|-I*) info ;;
        -find|find|-f*) find "$@" ;;
	-dig|dig|-d*) install "$@" ;;
	-bury|bury|-b*) remove "$@" ;;
	-up2date|up2date|-u*) update "$@" ;;
	-mkpkg|mkpkg|-mp*) mkpkg "$2" ;;
        -list|list|-l*) list "$@" ;;
	*) help ;;
esac
############## FIM DO CASE ####################
