#!/usr/bin/env ksh 
# Ok, i will remember to patch it later.
# shellcheck disable=SC1090,SC1091,SC2006,SC2059

# Otto-PKG - Ein Paketmanager, der Pakete über BitTorrent (und nun HTTP) herunterlädt.

# Caldera License (a.k.a 4-Clause BSD).
# Copyright (c) MMXX, Luiz Antônio Rangel et Projeto Pindorama;
# Read LICENSE.txt @ master branch root (GitHub) for the complete license.

############## Include Files ##############
. /usr/lib/otto/colors.shi
. /usr/lib/otto/blink.shi
. /usr/lib/otto/txtwait.shi
. /usr/lib/otto/posix-alt.shi
##############     END       ##############

############# Program Specifications ######
# Program Name: Otto
export ausgabe='0.6'
export PKG_FORMT='.psl'
export INDEXFILE='.otidx'
export PKG_COMPSS='7z'
export HOST_OS="`uname -s`"
##############     END       ##############

############# Export C locale #############
export LANG='C'
export LC_ALL="${LANG}"
##############     END       ##############

############# Export alias ##########
# This shall be commented when /bin/sh already has a native "chdir" command/system call, for example zsh.
alias chdir='cd'
##############     END       ##############

############## Global Variables/Subshells #
# Package and category name pipeline
export PKG="`/usr/bin/cut -d "/" -f 2 <<< "$PKGNM"`"
export CATEGORY="`/usr/bin/cut -d "/" -f 1 <<< "$PKGNM"`"
# Package filename
export PKG_FILENAME="`/usr/bin/sed 's/ /./g' <<< $NAME`"
# POSIX regex that will remove 'https://' and anything after '.<tld>'.
export mirror_basename=${${MIRROR#*//}%%/*}
##############     END       ##############

# Load the configuration file:
  if [ -f "/etc/make.cfg" ]; then
    . "/etc/make.cfg"
  else
    printf "${RED}ERROR$END: make.cfg not found!\nCopy this file from the installation media (or download it from the offcial repo) and configure it."
    exit 1
  fi

############## Script Functions ###########

############ ARE YA CHECKING SON? #########
Checkroot(){
  if [ "`whoami`" != 'root' ] && [ "`whoami`" != 'toor' ]; then
    printf "${YELLOW}WARNING$END: It looks like you are not logged into toor nor root user...\nWould you like to install the program on the highest userland layer (${HIUSR}) instead of installing directly on the root of the system?\n${YELLOW}WARNING$END: Some packages ${BOLD}cannot$END be installed on the highest userland layer under any circunstances.\nRegarding the first (and only) question: [Y,N]? "
    read -r ANTWORTEN
    if /usr/bin/grep -iq '^y' <<< "$ANTWORTEN"; then
      export USRDIR="${HIUSR}"
      export USRBIN="${HIUSRBIN}"
      export ETC="${HIETC}"
      export SRCDIR="${HISRCDIR}"
      export DIRISTATE=2
    else
      printf '%s\n' 'Alright so, exiting...'
      exit 130
    fi
  else
    export USRDIR="${LOUSR}"
    export USRBIN="${LOUSRBIN}"
    export ETC="${LOETC}"
    export SRCDIR="${LOSRCDIR}"
    export DIRISTATE='1'
  fi
}

CheckNetwork(){
  # $MIRROR is applyed only in packages officially created, unofficial packages probabily will use some custom domain.
  printf '%s' 'Checking network connection'
  txtwait
  if `printf "GET ${mirror_basename} HTTP/1.0\n\n" | /usr/bin/netcat "${mirror_basename}" 80 > /dev/null 2>&1`; then
    printf "[ ${GREEN}O.K.$END ]\n"
  else
    printf "[ ${RED}FAILED$END ]\n"
    printf "${RED}ERROR$END: Apparently, this box isn't connected to the World Wide Web.\a\nIf you don't have a internet connection, try to download the raw package (a ${YELLOW}$PKG_FORMT$END which contains everything necessary to install the program), save it in a diskette/CD/SDCard/USB and install it using ${YELLOW}otto dig [raw|-r]$END.\nIf you expected to have networking on this box, do some checks. Check if the network daemon is running, if the drivers are enabled on the Kernel and if the physical devices are even working/turned on.\n"
    exit 11
  fi
}

CheckParameters(){
  if [ -z "${OPTARG}" ]; then
    printf '%s\n' "${RED}ERROR$END: Insufficient parameters."
    exit 1
  fi
}

CheckDisk(){
  BENUTZT=`/usr/bin/df -m / | /usr/bin/tail -1 | /usr/bin/grep '[0-9]' | /usr/bin/awk '{print $3}'`
  DSKVERF=`/usr/bin/df -m / | /usr/bin/tail -1 | /usr/bin/grep '[0-9]' | /usr/bin/awk '{print $4}'`
  DSKGROSSE=$[${BENUTZT} + ${DSKVERF}]
  PKGGROSSE_FILE=`/usr/bin/du -sk "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/src.tar | /usr/bin/awk '{print $1}'`
  PKGGROSSE_CALC=`/usr/bin/bc <<< "scale=3; ${PKGGROSSE_FILE}/1000"`
  printf "\
Estimated total disk space: ${DSKGROSSE}MB
Estimated used space: ${DSKVERF}MB
Estimated space available: ${BENUTZT}MB
Estimated space to be consumed (build files): ${PKGGROSSE_CALC}MB
Estimated space after install: `/usr/bin/bc <<< "scale=3; ${DSKVERF} - ${PKGGROSSE_CALC}"`MB
"
}

CheckRawPackage(){
  if [ "${RAW_PKG}" = '1' ]; then 
    # For uncompress
    I="${PKGNM}" # I've called it "I" because i couldn't think of a name, sorry.
    BASENAME=`basename $I`
    PKG_FILENAME=`/usr/bin/sed 's/.psl//' <<< $I`
    EXTR_CMD=`/usr/bin/7z x $I -o "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"`
    EXTR_MSG="Extracting ${BASENAME}"
    # Source pkginfo
    SOURCE_PKGINFO=`. "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/pkginfo`
  else 
    # Run the DownloadPackage() function
    DownloadPackage
    # Source pkginfo
    SOURCE_PKGINFO=`. "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/pkginfo`
    # For uncompress
    EXTR_CMD=`/usr/bin/7z x "${SRCDIR}"/"${PKG_FILENAME}""${PKG_FORMT}" -o "${SRCDIR}"/uncompressed-"${PKG_FILENAME}" -bb1` # For uncompressing downloaded packages, local pkginfo needs to be sourcered first.
    EXTR_MSG="Extracting ${PKG_FILENAME}${PKG_FORMT}"
  fi
}

CheckDependencies(){
  # I hope this don't become a non-intentional fork bomb, like recursive GNU auto*hell scripts.
  for DEP in "`printf '%s' "${DEPS}"`"; do
    if [ /usr/bin/grep -Fxq "${DEP}" "${CONTENTS}"` ]; then # I need to add support for SRV4 (a.k.a Heirloom's pkgtools) contents file, i just don't know how to do it right now.
      printf "${DEP} is O.K."
    else
      printf "${YELLOW}WARNING$END: ${DEP} isn't installed. Installing it now."
      Install_Package "${DEP}"" 
    fi
  done
}

##############  Sure i am, dad.  ############

Uncompress(){
  printf '%s' "${EXTR_MSG}"
  txtwait &
  $EXTR_CMD
  /usr/bin/tar -vxf "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/src.tar && rm -v "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/src.tar
}

Build(){
  # Scripts for building the package shall be minimal and pure POSIX
  /bin/sh "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/install/checkinstall
  /bin/sh "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/install/makebuild
}

GenerateLocalpkgmap(){
cat > /var/otto/installed/pkg/OTTO"${PKG}"/pkgmap <<EOD
`cat "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/pkgmap`
EOD
} # This will load directory variables (ex: low /usr or high /usr?) for a specific install, in theory.

GenerateLocalpkginfo(){
cat > /var/otto/installed/pkg/OTTO"${PKG}"/pkginfo <<EOD
`cat "${SRCDIR}"/uncompressed-"${PKG_FILENAME}"/pkginfo`
EOD
}

AutoClean(){
  if [ "${AUTOCLEAN}" = 'YES' ]; then
    printf '%s\n' "Cleaning "${CATEGORY}"/"${PKG}" sources." ; rm -rvf "${SRCDIR}"/"uncompressed-*" && rm -vf "${SRCDIR}"/*"${PKG_FORMT}"
  else
    printf "${YELLOW}WARNING$END: Autocleaning is disabled, trash will stay in the system until someone with the needed permissions deletes them."
  fi
}

DownwloadPackage(){
  if [ "${SYNC_TYPE}" = 'bittorrent' ]; then
    TORRENT="${PKGNM}"
    . "${PKGDIR}"/"${TORRENT}"/pkginfo # Source local pkginfo
    /usr/bin/pico-torrent -s -f "${PKGDIR}"/"${TORRENT}"/pkgp2p -d "${SRCDIR}"
  elif [ "${SYNC_TYPE}" = 'http' ] || [ "${SYNC_TYPE}" = 'ftp' ]; then
    . "${PKGDIR}"/"${PKGNM}"/pkginfo # Source local pkginfo
    chdir ${SRCDIR} && { /usr/bin/curl -O -# "`cat "${PKGDIR}/${PKG}/pkglink"`" ; chdir -;}
  else
    printf "${RED}ERROR$END: ${YELLOW}SYNC_TYPE$END not set @ /etc/make.cfg.\nAre you trying to install a local package? Use ${YELLOW}-r$END with ${YELLOW}-d$END"
    exit 1
 fi
}

InstallPackage(){
  printf "Packages to install: ${#@}\n" 
  for PKGNM in "${@}"; do
    CheckRawPackage
    Uncompress
    $SOURCE_PKGINFO # Source package extracted pkginfo (i know, it's messy but it works in theory)
    PKGNM="${CATEGORY}/${PKG}"
    CheckDependencies
    CheckDisk
    Build
    mkdir /var/otto/installed/pkg/OTTO"${PKG}"
    GenerateLocalpkgmap
    GenerateLocalpkginfo
    printf '%s\n' "${PKGNM}-${VERSION}" >> ${CONTENTS}
  done
  AutoClean
  exit 0
}

RemovePackage(){
  for PKGNM in "${@}"; do 
    printf '%s' "Removing ${CATEGORY}/${PKG}"
    txtwait &
    < /var/otto/installed/pkg/OTTO"$PKG"/pkgmap /usr/bin/xargs rm -rfv  # Wait, do this work? Really awesome to see that i didn't need that cat.
    /usr/bin/rm -rfv /var/otto/installed/pkg/OTTO"${PKG}"
    /usr/bin/sed -i "/${PKGNM}/d" ${CONTENTS}
  done
  exit 0
}

Update(){
  local index_package_source="`. "${PKGDIR}"/"${PKGNM}"/pkginfo`"
  local index_package_version="`/usr/bin/tr -d '.' <<< "${VERSION}"`"
  local installed_package_version="`/usr/bin/grep -oP "${PKGNM}"'-[0-9]+\.[0-9]+' ${CONTENTS} | /usr/bin/tr -d '.' | /usr/bin/tr -dc '0-9'`"
  printf "Refreshing packages catalog (${mirror_basename}) "
  {chdir "${PKGDIR}" && { /usr/bin/git clone -v http://github.com/Projeto-Pindorama/meta.git .;}}
  printf '%s\n' "Package index updated (`/usr/bin/date '+%Y.%m.%d @ %H:%M:%S'`)."
  for PKGNM in "${@}"; do
    printf '%s\n' "Checking updates for ${PKGNM}."
    if [ "${index_package_version}" > "${installed_package_version}" ]; then
      printf '%s' "Updating ${PKGNM} (${installed_package_version} -> ${index_package_version})"
      txtwait
      /usr/bin/sed -i "/${PKGNM}-${installed_package_version}/d" "${CONTENTS}"
      /usr/bin/rm -rf /var/otto/installed/pkg/OTTO"${PKG}"
      InstallPackage "${PKGNM}"
      printf '%s\n' "Updated ${PKGNM} succesfully."
    elif [ "${index_package_version}" < "${installed_package_version}" ]; then
      echo "${YELLOW}WARNING$END: ${PKGNM}'s index files are from an older version than installed one, downgrading."
      printf '%s' "Downgrading ${PKGNM} (${installed_package_version} -> ${index_package_version})"
      txtwait
      /usr/bin/sed -i "/${PKGNM}-${installed_package_version}/d" "${CONTENTS}"
      /usr/bin/rm -rf /var/otto/installed/pkg/OTTO"${PKG}"
      InstallPackage "${PKGNM}"
      printf '%s\n' "Downgraded ${PKGNM}."
    else
      printf '%s\n' "${PKGNM} is up to date."
    fi
  done
  exit 0
}

MakePackage(){
  # This first implementation will be only for pure source code.
  # I need to make it more "binary-packaging-friendly".
  local makepkg_dir="${HOME}/packaging/${1}"
  printf '%s\n' "Creating package skeleton for ${1}."
  mkdir -v ${makepkg_dir}
  mkdir -v ${makepkg_dir}/install
  mkdir -v ${makepkg_dir}/src
  mkdir -v ${makepkg_dir}/tmpinst
  echo "
PKG="${1}"
NAME="${1} X.Y.Z '<CPU> <ARCH>bit' Copacabana"
VERSION='X.Y.Z'
PSTAMP=`/usr/bin/date '+%Y.%m.%d'`
VENDOR=''
EMAIL=''
DESC=''
ARCH=''
CATEGORY=''
CLASSES=''
DEPS=''
BASEDIR='/'
DIRSTATES='1 2'
" > ${makepkg_dir}/pkginfo
  > ${makepkg_dir}/pkgmap
  # Edit pkginfo
  #/usr/bin/env ${EDITOR} ${makepkg_dir}/pkginfo
  exit 0
}

ListPackages(){
  if [ -f "${CONTENTS}" ]; then
    pcat "${CONTENTS}"
    lines "${CONTENTS}"
    exit 0
  else
    printf "${RED}ERROR:$END package list not found! This isn't a good thing...\a\n"
    exit 140
  fi
}

Info(){ 
  printf "\
${BOLD}Otto, eine Paketverwaltungs-Toolchain.$END
Ausgabe: ${ausgabe}
Paketformat: ${PKG_FORMT}
Betriebssystem: ${HOST_OS}

Copyright (c) MMXX Luiz Antonio Rangel et Project Pindorama.
See CONTRIBUTORS.txt file for more.

✠ GOTT MIT UNS ✠
"
  exit 0
}

Help(){
    printf "\
[USAGE]: otto -<flags> <category>/<package>|<package filename>$PKG_FORMT
         otto -m <package name>"
  exit 0
}

#find(){

#}
##############     END      #################

############## CASE AND GETOPT #################
OPTPARAMS="NHIlfvrd:b:u:m:" 
while getopts "${OPTPARAMS}" OPT; do
  case "${OPT}" in
    "H") Help ;;
    "I") Info ;;
    "f") find ;;
    "v") export VERBOSE=1 ;;
    "r") export RAW_PKG=1 ;;
    "d") Checkroot && InstallPackage "${OPTARG}" ;;
    "b") CheckParameters "${OPTARG}" && Checkroot && RemovePackage "${OPTARG}" ;;
    "u") Checkroot && Update "${OPTARG}" ;;
    "m") MakePackage "${OPTARG}" ;;
    "l") ListPackages ;;
    "N") CheckNetwork ;;
    "?") Help ;;
  esac
done
############## CASE AND GETOPT #################
